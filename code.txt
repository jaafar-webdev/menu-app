The following is a digest of the repository "menu-app".
This digest is designed to be easily parsed by Large Language Models.

--- SUMMARY ---
Repository: menu-app
Files Analyzed: 73
Total Text Size: 91.52 KB
Estimated Tokens (text only): ~٢٦٬١٥٩

--- DIRECTORY STRUCTURE ---
menu-app/
├── .husky/
│   ├── _/
│   │   ├── applypatch-msg
│   │   ├── commit-msg
│   │   ├── h
│   │   ├── husky.sh
│   │   ├── post-applypatch
│   │   ├── post-checkout
│   │   ├── post-commit
│   │   ├── post-merge
│   │   ├── post-rewrite
│   │   ├── pre-applypatch
│   │   ├── pre-auto-gc
│   │   ├── pre-commit
│   │   ├── pre-merge-commit
│   │   ├── pre-push
│   │   ├── pre-rebase
│   │   └── prepare-commit-msg
│   └── pre-commit
├── src/
│   ├── app/
│   │   ├── (public)/
│   │   │   ├── checkout/
│   │   │   │   ├── CheckoutClientView.jsx
│   │   │   │   ├── OrderSummary.jsx
│   │   │   │   ├── page.js
│   │   │   │   └── UserInfoForm.jsx
│   │   │   ├── login/
│   │   │   │   └── page.jsx
│   │   │   ├── menu/
│   │   │   │   ├── loading.jsx
│   │   │   │   └── page.js
│   │   │   ├── orders/
│   │   │   │   └── page.jsx
│   │   │   ├── profile/
│   │   │   │   └── page.jsx
│   │   │   ├── register/
│   │   │   │   └── page.jsx
│   │   │   ├── reset-password/
│   │   │   │   └── page.jsx
│   │   │   └── layout.js
│   │   ├── actions/
│   │   │   └── auth.js
│   │   ├── api/
│   │   │   └── groups/
│   │   │       └── route.ts [binary]
│   │   ├── dashboard/
│   │   │   ├── add-category/
│   │   │   │   ├── actions.ts [binary]
│   │   │   │   ├── AddCategoryForm.tsx
│   │   │   │   └── page.tsx
│   │   │   ├── add-product/
│   │   │   │   ├── actions.ts [binary]
│   │   │   │   ├── AddProductForm.tsx
│   │   │   │   └── page.tsx
│   │   │   ├── category/
│   │   │   │   ├── actions.ts [binary]
│   │   │   │   ├── CategoriesTable.tsx
│   │   │   │   └── page.tsx
│   │   │   ├── edit-product/
│   │   │   │   └── [id]/
│   │   │   │       ├── actions.ts [binary]
│   │   │   │       ├── EditProductForm.tsx
│   │   │   │       └── page.tsx
│   │   │   ├── products/
│   │   │   │   ├── actions.ts [binary]
│   │   │   │   ├── page.tsx
│   │   │   │   └── ProductsTable.tsx
│   │   │   └── layout.tsx
│   │   ├── globals.css
│   │   ├── layout.js
│   │   ├── not-found.jsx
│   │   └── page.js
│   ├── components/
│   │   ├── auth/
│   │   │   ├── AuthLink.jsx
│   │   │   └── FormWrapper.jsx
│   │   ├── ui/
│   │   │   ├── Alert.jsx
│   │   │   ├── Input.tsx
│   │   │   ├── Select.jsx
│   │   │   └── UploadImage.tsx
│   │   ├── Button.jsx
│   │   └── LogoutButton.jsx
│   ├── context/
│   │   └── AuthContext.jsx
│   ├── store/
│   │   └── cartStore.js
│   ├── types/
│   │   └── index.ts [binary]
│   └── middleware.js
├── db.json
├── eslint.config.mjs
├── jsconfig.json
├── LICENSE
├── next.config.mjs
├── package.json
├── postcss.config.mjs
├── README.md
├── tailwind.config.js
└── tsconfig.json


--- FILE CONTENTS ---
============================================================
FILE: .husky/_/applypatch-msg
============================================================
#!/usr/bin/env sh
. "$(dirname "$0")/h"

============================================================
FILE: .husky/_/commit-msg
============================================================
#!/usr/bin/env sh
. "$(dirname "$0")/h"

============================================================
FILE: .husky/_/h
============================================================
#!/usr/bin/env sh
[ "$HUSKY" = "2" ] && set -x
n=$(basename "$0")
s=$(dirname "$(dirname "$0")")/$n

[ ! -f "$s" ] && exit 0

if [ -f "$HOME/.huskyrc" ]; then
	echo "husky - '~/.huskyrc' is DEPRECATED, please move your code to ~/.config/husky/init.sh"
fi
i="${XDG_CONFIG_HOME:-$HOME/.config}/husky/init.sh"
[ -f "$i" ] && . "$i"

[ "${HUSKY-}" = "0" ] && exit 0

export PATH="node_modules/.bin:$PATH"
sh -e "$s" "$@"
c=$?

[ $c != 0 ] && echo "husky - $n script failed (code $c)"
[ $c = 127 ] && echo "husky - command not found in PATH=$PATH"
exit $c


============================================================
FILE: .husky/_/husky.sh
============================================================
echo "husky - DEPRECATED

Please remove the following two lines from $0:

#!/usr/bin/env sh
. \"\$(dirname -- \"\$0\")/_/husky.sh\"

They WILL FAIL in v10.0.0
"

============================================================
FILE: .husky/_/post-applypatch
============================================================
#!/usr/bin/env sh
. "$(dirname "$0")/h"

============================================================
FILE: .husky/_/post-checkout
============================================================
#!/usr/bin/env sh
. "$(dirname "$0")/h"

============================================================
FILE: .husky/_/post-commit
============================================================
#!/usr/bin/env sh
. "$(dirname "$0")/h"

============================================================
FILE: .husky/_/post-merge
============================================================
#!/usr/bin/env sh
. "$(dirname "$0")/h"

============================================================
FILE: .husky/_/post-rewrite
============================================================
#!/usr/bin/env sh
. "$(dirname "$0")/h"

============================================================
FILE: .husky/_/pre-applypatch
============================================================
#!/usr/bin/env sh
. "$(dirname "$0")/h"

============================================================
FILE: .husky/_/pre-auto-gc
============================================================
#!/usr/bin/env sh
. "$(dirname "$0")/h"

============================================================
FILE: .husky/_/pre-commit
============================================================
#!/usr/bin/env sh
. "$(dirname "$0")/h"

============================================================
FILE: .husky/_/pre-merge-commit
============================================================
#!/usr/bin/env sh
. "$(dirname "$0")/h"

============================================================
FILE: .husky/_/pre-push
============================================================
#!/usr/bin/env sh
. "$(dirname "$0")/h"

============================================================
FILE: .husky/_/pre-rebase
============================================================
#!/usr/bin/env sh
. "$(dirname "$0")/h"

============================================================
FILE: .husky/_/prepare-commit-msg
============================================================
#!/usr/bin/env sh
. "$(dirname "$0")/h"

============================================================
FILE: .husky/pre-commit
============================================================
#!/bin/sh
. "$(dirname "$0")/_/husky.sh"

npx lint-staged

============================================================
FILE: src/app/(public)/checkout/CheckoutClientView.jsx
============================================================
"use client";

import UserInfoForm from "./UserInfoForm";
import Button from "@/components/Button";
import useCheckout from "../../../features/public/hooks/useCheckout";
import CartItemsList from "@/features/public/cart/CartItemsList";
import CartDesktop from "@/features/public/cart/CartDesktop";

const CheckoutClientView = () => {
  const {
    userInfo,
    items,
    errors,
    handleInputChange,
    handleSubmit,
    handleBlur,
  } = useCheckout();

  return (
    <form onSubmit={handleSubmit} className="mx-auto space-y-6">
      <UserInfoForm
        userInfo={userInfo}
        onInputChange={handleInputChange}
        onBlur={handleBlur}
        errors={errors}
      />
      <CartDesktop showSummary={false} />
      <Button type="submit" size="lg" className="w-full">
        إرسال الطلب
      </Button>
    </form>
  );
};

export default CheckoutClientView;


============================================================
FILE: src/app/(public)/checkout/OrderSummary.jsx
============================================================
const OrderSummary = ({ items, deliveryFee = 0 }) => {
  const subtotal = items.reduce(
    (sum, item) => sum + item.product.price * item.quantity,
    0,
  );
  const total = subtotal + deliveryFee;

  return (
    <div className="border border-gray-200 rounded-md p-4 space-y-2">
      <h2 className="text-lg font-semibold">ملخص الفاتورة</h2>
      <div className="flex justify-between">
        <span>سعر المنتجات</span>
        <span>{subtotal.toFixed(2)} جنيه</span>
      </div>
      <div className="flex justify-between">
        <span>رسوم التوصيل</span>
        <span>{deliveryFee.toFixed(2)} جنيه</span>
      </div>
      <hr />
      <div className="flex justify-between font-bold text-lg">
        <span>الإجمالي</span>
        <span>{total.toFixed(2)} جنيه</span>
      </div>
    </div>
  );
};

export default OrderSummary;


============================================================
FILE: src/app/(public)/checkout/page.js
============================================================
import Link from "next/link";
import ArrowIcon from "../../../components/icon/ArrowIcon";
import CheckoutClientView from "./CheckoutClientView";

const CheckoutPage = () => {
  return (
    <div className="p-4 mx-auto lg:w-[90%]">
      <h1 className="flex items-center mb-6">
        <Link
          href="/menu"
          className="bg-primary text-white w-9 h-9 rounded-sm flex items-center justify-center ml-3"
        >
          <ArrowIcon fill="white" />
        </Link>
        مراجعة الطلب
      </h1>
      <CheckoutClientView />
    </div>
  );
};

export default CheckoutPage;


============================================================
FILE: src/app/(public)/checkout/UserInfoForm.jsx
============================================================
import PhoneIcon from "../../../components/icon/PhoneIcon";
import UserIcon from "../../../components/icon/UserIcon";
import Input from "@/components/ui/Input";

const UserInfoForm = ({ userInfo, onInputChange, onBlur, errors }) => {
  return (
    <div className="space-y-4">
      <div className="flex flex-col md:flex-row gap-4">
        <Input
          icon={<UserIcon />}
          type="text"
          name="name"
          value={userInfo.name}
          onChange={onInputChange}
          readOnly
          disabled
        />
        <Input
          icon={<PhoneIcon />}
          type="text"
          name="phone"
          value={userInfo.phone}
          onChange={onInputChange}
          readOnly
          disabled
        />
      </div>
      <textarea
        name="address"
        value={userInfo.address}
        onChange={onInputChange}
        onBlur={onBlur}
        placeholder="أدخل عنوانك هنا..."
        className={`w-full p-3 bg-gray-100 border rounded-md shadow-sm focus:outline-none focus:ring-1 focus:ring-primary ${
          errors.address ? "border-red-500" : "border-gray-300"
        }
            }`}
        rows="4"
      />
      {errors.address && (
        <p className="text-red-500 text-sm">{errors.address}</p>
      )}
    </div>
  );
};

export default UserInfoForm;


============================================================
FILE: src/app/(public)/login/page.jsx
============================================================
"use client";

import useLogin from "@/features/public/hooks/useLogin";
import AuthLink from "@/components/auth/AuthLink";
import FormWrapper from "@/components/auth/FormWrapper";
import Alert from "@/components/ui/Alert";
import Input from "@/components/ui/Input";
import Button from "@/components/Button";

const LoginPage = () => {
  const {
    formData,
    errors,
    isSubmitting,
    showSuccessMessage,
    handleChange,
    handleSubmit,
  } = useLogin();

  return (
    <FormWrapper title="تسجيل الدخول">
      {showSuccessMessage && (
        <Alert type="success" message="تم تسجيل الدخول بنجاح!" />
      )}
      {errors.form && <Alert type="error" message={errors.form} />}
      <form className="mt-8 space-y-6" onSubmit={handleSubmit}>
        <Input
          id="email"
          name="email"
          type="email"
          label="البريد الإلكتروني"
          autoComplete="email"
          required
          placeholder="البريد الإلكتروني"
          value={formData.email}
          onChange={handleChange}
          error={errors.email}
        />
        <Input
          id="password"
          name="password"
          type="password"
          label="كلمة المرور"
          autoComplete="current-password"
          required
          placeholder="كلمة المرور"
          value={formData.password}
          onChange={handleChange}
          error={errors.password}
        />

        <div className="flex items-center justify-between">
          <div className="text-sm">
            <AuthLink href="/reset-password">هل نسيت كلمة المرور؟</AuthLink>
          </div>
        </div>

        <Button type="submit" disabled={isSubmitting} className="w-full">
          {isSubmitting ? "جاري تسجيل الدخول..." : "تسجيل الدخول"}
        </Button>
      </form>
      <div className="text-sm text-center">
        <p className="text-gray-600">
          ليس لديك حساب؟ <AuthLink href="/register">إنشاء حساب</AuthLink>
        </p>
      </div>
    </FormWrapper>
  );
};

export default LoginPage;


============================================================
FILE: src/app/(public)/menu/loading.jsx
============================================================
export default function Loading() {
  return (
    <div className="flex justify-center items-center h-screen">
      <div
        className="inline-block h-8 w-8 animate-spin rounded-full border-4 border-solid border-current border-r-transparent align-[-0.125em] text-primary motion-reduce:animate-[spin_1.5s_linear_infinite]"
        role="status"
      >
        <span className="!absolute !-m-px !h-px !w-px !overflow-hidden !whitespace-nowrap !border-0 !p-0 ![clip:rect(0,0,0,0)]">
          Loading...
        </span>
      </div>
    </div>
  );
}


============================================================
FILE: src/app/(public)/menu/page.js
============================================================
import MenuList from "@/features/public/menuList/MenuList";
import CartDesktop from "@/features/public/cart/CartDesktop";
import { getGroups } from "@/features/public/services/getGroups";
import Categories from "@/features/public/categories/Categories";

export default async function MenuPage() {
  const groups = await getGroups();

  return (
    <div className="main-container w-full">
      <div className="w-full md:flex md:gap-2.5 mt-4 mx-auto xl:w-[90%]">
        <div className="md:w-2/3 lg:w-9/12 lg:flex">
          <div className="lg:w-3/12 sticky top-[65px] z-10">
            <Categories groups={groups} />
          </div>
          <div className="lg:w-9/12">
            <MenuList groups={groups} />
          </div>
        </div>
        <div className="md:w-1/3 lg:w-3/12 mt-4 md:mt-0">
          <CartDesktop />
        </div>
      </div>
    </div>
  );
}


============================================================
FILE: src/app/(public)/orders/page.jsx
============================================================
"use client";

import { useAuth } from "@/context/AuthContext";
import Link from "next/link";

const OrdersPage = () => {
  const { user } = useAuth();

  return (
    <div className="flex items-center justify-center min-h-screen bg-gray-50">
      <div className="w-full max-w-4xl p-8 space-y-6 bg-white rounded-lg shadow-md">
        <h2 className="text-2xl font-bold text-center text-gray-900">طلباتي</h2>

        <div className="space-y-4">
          {/* Placeholder for when there are no orders */}
          <div className="p-8 text-center bg-gray-100 rounded-md">
            <p className="text-lg text-gray-600">لا توجد طلبات سابقة</p>
            <p className="mt-2 text-sm text-gray-500">
              عندما تقوم بإجراء طلبات، ستظهر هنا
            </p>
          </div>

          {/* This section would be replaced with actual orders data */}
          <div className="mt-6 text-center">
            <Link
              href="/menu"
              className="px-4 py-2 text-sm font-medium text-white bg-indigo-600 rounded-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
            >
              تصفح القائمة
            </Link>
          </div>
        </div>
      </div>
    </div>
  );
};

export default OrdersPage;


============================================================
FILE: src/app/(public)/profile/page.jsx
============================================================
"use client";

import { useAuth } from "@/context/AuthContext";
import LogoutButton from "@/components/LogoutButton";

const ProfilePage = () => {
  const { user } = useAuth();

  return (
    <div className="flex items-center justify-center min-h-screen bg-gray-50">
      <div className="w-full max-w-md p-8 space-y-6 bg-white rounded-lg shadow-md">
        <h2 className="text-2xl font-bold text-center text-gray-900">
          الملف الشخصي
        </h2>

        <div className="space-y-4">
          {user?.photoURL && (
            <div className="flex justify-center">
              <img
                src={user.photoURL}
                alt="صورة المستخدم"
                className="w-24 h-24 rounded-full"
              />
            </div>
          )}

          <div className="p-4 bg-gray-100 rounded-md">
            <p className="mb-2">
              <span className="font-semibold">الاسم:</span>{" "}
              {user?.displayName || "غير محدد"}
            </p>
            <p className="mb-2">
              <span className="font-semibold">البريد الإلكتروني:</span>{" "}
              {user?.email}
            </p>
            <p className="mb-2">
              <span className="font-semibold">
                حالة التحقق من البريد الإلكتروني:
              </span>
              {user?.emailVerified ? "تم التحقق" : "لم يتم التحقق"}
            </p>
          </div>

          <div className="flex justify-center">
            <LogoutButton />
          </div>
        </div>
      </div>
    </div>
  );
};

export default ProfilePage;


============================================================
FILE: src/app/(public)/register/page.jsx
============================================================
"use client";

import useRegister from "@/features/public/hooks/useRegister";
import FormWrapper from "@/components/auth/FormWrapper";
import Input from "@/components/ui/Input";
import Button from "@/components/Button";
import Alert from "@/components/ui/Alert";
import AuthLink from "@/components/auth/AuthLink";

const RegisterPage = () => {
  const {
    formData,
    errors,
    isSubmitting,
    showSuccessMessage,
    handleChange,
    handleSubmit,
  } = useRegister();

  return (
    <FormWrapper title="إنشاء حساب جديد">
      {showSuccessMessage && (
        <Alert type="success" message="تم إنشاء حسابك بنجاح!" />
      )}
      {errors.firebase && <Alert type="error" message={errors.firebase} />}
      <form className="mt-2 space-y-6" onSubmit={handleSubmit}>
        <Input
          id="name"
          name="name"
          type="text"
          label="الاسم الكامل"
          autoComplete="name"
          required
          placeholder="الاسم الكامل"
          value={formData.name}
          onChange={handleChange}
          error={errors.name}
        />
        <Input
          id="email"
          name="email"
          type="email"
          label="البريد الإلكتروني"
          autoComplete="email"
          required
          placeholder="البريد الإلكتروني"
          value={formData.email}
          onChange={handleChange}
          error={errors.email}
        />
        <Input
          id="password"
          name="password"
          type="password"
          label="كلمة المرور"
          autoComplete="new-password"
          required
          placeholder="كلمة المرور"
          value={formData.password}
          onChange={handleChange}
          error={errors.password}
        />
        <Input
          id="confirmPassword"
          name="confirmPassword"
          type="password"
          label="تأكيد كلمة المرور"
          autoComplete="new-password"
          required
          placeholder="تأكيد كلمة المرور"
          value={formData.confirmPassword}
          onChange={handleChange}
          error={errors.confirmPassword}
        />
        <Button type="submit" disabled={isSubmitting} className="w-full">
          {isSubmitting ? "جاري إنشاء الحساب..." : "إنشاء حساب"}
        </Button>
      </form>
      <div className="text-sm text-center">
        <p className="text-gray-600">
          لديك حساب بالفعل؟ <AuthLink href="/login">تسجيل الدخول</AuthLink>
        </p>
      </div>
    </FormWrapper>
  );
};

export default RegisterPage;


============================================================
FILE: src/app/(public)/reset-password/page.jsx
============================================================
"use client";

import Link from "next/link";
import useResetPassword from "@/features/public/hooks/useResetPassword";
import Input from "@/components/ui/Input";
import Button from "@/components/Button";
import FormWrapper from "@/components/auth/FormWrapper";
import Alert from "@/components/ui/Alert";
import AuthLink from "@/components/auth/AuthLink";

const ResetPasswordPage = () => {
  const {
    email,
    errors,
    isSubmitting,
    successMessage,
    handleChange,
    handleSubmit,
  } = useResetPassword();

  return (
    <FormWrapper title="إعادة تعيين كلمة المرور">
      <Alert type="success" message={successMessage} />
      <Alert type="error" message={errors.firebase} />

      <p className="text-sm text-gray-600">
        أدخل عنوان بريدك الإلكتروني وسنرسل لك رابطًا لإعادة تعيين كلمة المرور
        الخاصة بك.
      </p>

      <form className="space-y-6" onSubmit={handleSubmit} noValidate>
        <Input
          id="email"
          name="email"
          type="email"
          label="البريد الإلكتروني"
          value={email}
          onChange={handleChange}
          error={errors.email}
          autoComplete="email"
          required
        />
        <Button type="submit" disabled={isSubmitting}>
          {isSubmitting ? "جاري الإرسال..." : "إرسال رابط إعادة التعيين"}
        </Button>
      </form>
      <div className="text-sm text-center">
        <p className="text-gray-600">
          <AuthLink href="/login">العودة إلى تسجيل الدخول</AuthLink>
        </p>
      </div>
    </FormWrapper>
  );
};

export default ResetPasswordPage;


============================================================
FILE: src/app/(public)/layout.js
============================================================
import CartMobileBar from "@/features/public/cart/CartMobileBar";
import Header from "@/features/public/header/Header";

export default function RootLayout({ children }) {
  return (
    <>
      <Header />
      {children}
      <CartMobileBar />
    </>
  );
}


============================================================
FILE: src/app/actions/auth.js
============================================================
"use server";

import { cookies } from "next/headers";

export async function loginAction(token) {
  try {
    if (!token) {
      return { error: "Token is required" };
    }

    cookies().set({
      name: "authToken",
      value: token,
      httpOnly: true,
      secure: process.env.NODE_ENV === "production",
      sameSite: "lax",
      path: "/",
    });

    return { success: true, message: "Logged in successfully" };
  } catch (error) {
    console.error("Login Action Error:", error);
    return { error: "Internal Server Error" };
  }
}

export async function logoutAction() {
  try {
    cookies().set("authToken", "", { maxAge: 0, path: "/" });
    return { success: true, message: "Logged out successfully" };
  } catch (error) {
    console.error("Logout Action Error:", error);
    return { error: "Internal Server Error" };
  }
}


============================================================
FILE: src/app/dashboard/add-category/AddCategoryForm.tsx
============================================================
"use client";

import { useFormState, useFormStatus } from "react-dom";
import Input from "@/components/ui/Input";
import Button from "@/components/Button";
import UploadImage from "@/components/ui/UploadImage";
import { addCategory, CategoryResponse } from "./actions";

const initialState: CategoryResponse = {
   message: "",
};

const SubmitButton = () => {
   const { pending } = useFormStatus();

   return (
      <Button
         variant="primary"
         size="default"
         type="submit"
         className="w-full"
         aria-disabled={pending}
      >
         {pending ? "جاري الإنشاء..." : "إنشاء الفئة"}
      </Button>
   );
};

const AddCategoryForm = () => {
   const [state, formAction] = useFormState(addCategory, initialState);

   return (
      <form action={formAction} className="space-y-6">
         {/* حقل اسم الفئة */}
         <div>
            <label
               htmlFor="categoryName"
               className="block text-sm font-medium text-gray-700"
            >
               اسم الفئة
            </label>
            <Input
               type="text"
               id="categoryName"
               name="categoryName"
               className="mt-1"
               placeholder="مثال: بيتزا"
               required
            />
         </div>

         {/* رفع الصورة */}
         <div>
            <UploadImage
               name="image"
               aria-label="صورة الفئة"
               accept="image/*"
               required
            />
         </div>

         {/* زر الإرسال */}
         <SubmitButton />

         {/* رسالة النتيجة */}
         {state.message && (
            <p
               className={`mt-2 text-sm ${state.success ? "text-green-600" : "text-red-600"}`}
               aria-live="polite"
            >
               {state.message}
            </p>
         )}
      </form>
   );
};

export default AddCategoryForm;


============================================================
FILE: src/app/dashboard/add-category/page.tsx
============================================================
import type { FC } from "react";
import AddCategoryForm from "./AddCategoryForm";

const AddCategoryPage: FC = () => {
   return (
      <div className="max-w-4xl mx-auto p-8">
         <h1 className="text-2xl font-bold mb-6">Add New Category</h1>
         <AddCategoryForm />
      </div>
   );
};

export default AddCategoryPage;


============================================================
FILE: src/app/dashboard/add-product/AddProductForm.tsx
============================================================
"use client";

import { useEffect, useState } from "react";
import { useFormState, useFormStatus } from "react-dom";
import Input from "@/components/ui/Input";
import Button from "@/components/Button";
import UploadImage from "@/components/ui/UploadImage";
import { addProduct, getCategories, ProductResponse } from "./actions";

interface Category {
   id: string;
   name: string;
}

const initialState: ProductResponse = {
   message: "",
   success: false,
};

function SubmitButton() {
   const { pending } = useFormStatus();

   return (
      <Button 
         type="submit" 
         className="w-full" 
         aria-disabled={pending}
         variant="primary"
         size="default"
      >
         {pending ? "جاري الإنشاء..." : "إنشاء المنتج"}
      </Button>
   );
}


export function AddProductForm() {
   const [state, formAction] = useFormState(addProduct, initialState);
   const [categories, setCategories] = useState<Category[]>([]);

   useEffect(() => {
      async function fetchCategories() {
         const fetchedCategories = await getCategories();
         setCategories(fetchedCategories as Category[]);
      }
      fetchCategories();
   }, []);

   return (
      <form action={formAction} className="space-y-6">
         <div>
            <label
               htmlFor="name"
               className="block text-sm font-medium text-gray-700"
            >
               اسم المنتج
            </label>
            <Input
               type="text"
               id="name"
               name="name"
               className="mt-1"
               placeholder="مثال: بيتزا مارجريتا"
               required
            />
         </div>

         <div>
            <label
               htmlFor="description"
               className="block text-sm font-medium text-gray-700"
            >
               الوصف
            </label>
            <textarea
               id="description"
               name="description"
               rows={3}
               className="block w-full px-3 py-2 mt-1 text-gray-900 bg-white border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
               placeholder="وصف المنتج..."
               required
            ></textarea>
         </div>

         <div>
            <label
               htmlFor="categoryId"
               className="block text-sm font-medium text-gray-700"
            >
               الفئة
            </label>
            <select
               id="categoryId"
               name="categoryId"
               className="block w-full px-3 py-2 mt-1 text-gray-900 bg-white border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
               required
            >
               <option value="">اختر فئة</option>
               {categories.map((category) => (
                  <option key={category.id} value={category.id}>
                     {category.name}
                  </option>
               ))}
            </select>
         </div>

         <div>
            <label
               htmlFor="price"
               className="block text-sm font-medium text-gray-700"
            >
               السعر
            </label>
            <Input
               type="number"
               id="price"
               name="price"
               placeholder="مثال: 50.00"
               required
               step="0.01"
               className="mt-1"
            />
         </div>

         <div>
            <UploadImage name="image" />
         </div>

         <SubmitButton />

         {state?.message && (
            <p
               className={`mt-2 text-sm ${state.success ? "text-green-600" : "text-red-600"}`}
               aria-live="polite"
            >
               {state.message}
            </p>
         )}
      </form>
   );
}


============================================================
FILE: src/app/dashboard/add-product/page.tsx
============================================================
import { AddProductForm } from "./AddProductForm";

export default function AddProductPage() {
  return (
    <div className="flex flex-col items-center justify-center min-h-screen bg-gray-50 py-12">
      <div className="w-full max-w-2xl p-8 space-y-8 bg-white rounded-lg shadow-md">
        <h1 className="text-2xl font-bold text-center text-gray-900">
          إنشاء منتج جديد
        </h1>
        <AddProductForm />
      </div>
    </div>
  );
}

============================================================
FILE: src/app/dashboard/category/CategoriesTable.tsx
============================================================
"use client";
import { Group } from "@/types";
import { deleteCategory } from "./actions";
import Image from "next/image";

interface CategoriesTableProps {
   categories: Group[];
}

const CategoriesTable: React.FC<CategoriesTableProps> = ({ categories }) => {
   const handleDelete = async (categoryId: string) => {
      const result = await deleteCategory(categoryId);
      if (!result.success) {
         alert(result.message);
      }
   };

   return (
      <div className="overflow-x-auto">
         <table className="min-w-full bg-white rounded-lg shadow-md">
            <thead className="bg-gray-200 text-gray-600 uppercase text-sm leading-normal">
               <tr>
                  <th className="py-3 px-6 text-right">الاسم</th>
                  <th className="py-3 px-6 text-right">الصورة</th>
                  <th className="py-3 px-6 text-center">الإجراءات</th>
               </tr>
            </thead>
            <tbody className="text-gray-600 text-sm font-light">
               {categories.map((category: Group) => (
                  <tr
                     key={category.id}
                     className="border-b border-gray-200 hover:bg-gray-100"
                  >
                     <td className="py-3 px-6 text-right">
                        <span className="font-semibold">{category.name}</span>
                     </td>
                     <td>
                        <div className="m-2">
                           <Image
                              src={category.imageUrl!}
                              alt=""
                              width={100}
                              height={100}
                           />
                        </div>
                     </td>
                     <td className="py-3 px-6 text-center">
                        <div className="flex item-center justify-center gap-2">
                           <button className="w-8 h-8 rounded-xl bg-blue-500 text-white flex items-center justify-center mr-2 hover:bg-blue-600">
                              <svg
                                 xmlns="http://www.w3.org/2000/svg"
                                 className="h-5 w-5"
                                 fill="none"
                                 viewBox="0 0 24 24"
                                 stroke="currentColor"
                              >
                                 <path
                                    strokeLinecap="round"
                                    strokeLinejoin="round"
                                    strokeWidth="2"
                                    d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.5L16.732 3.732z"
                                 />
                              </svg>
                           </button>
                           <button
                              className="w-8 h-8 rounded-xl bg-red-500 text-white flex items-center justify-center hover:bg-red-600"
                              onClick={() => handleDelete(category.id!)}
                           >
                              <svg
                                 xmlns="http://www.w3.org/2000/svg"
                                 className="h-5 w-5"
                                 fill="none"
                                 viewBox="0 0 24 24"
                                 stroke="currentColor"
                              >
                                 <path
                                    strokeLinecap="round"
                                    strokeLinejoin="round"
                                    strokeWidth="2"
                                    d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"
                                 />
                              </svg>
                           </button>
                        </div>
                     </td>
                  </tr>
               ))}
            </tbody>
         </table>
      </div>
   );
};

export default CategoriesTable;


============================================================
FILE: src/app/dashboard/category/page.tsx
============================================================
import { db } from "@/lib/firebase";
import { collection, getDocs } from "firebase/firestore";
import CategoriesTable from "./CategoriesTable";
import { Group } from "@/types";

async function getCategories(): Promise<Group[]> {
   const categoriesCol = collection(db, "categories");
   const categorySnapshot = await getDocs(categoriesCol);
   const categoryList = categorySnapshot.docs.map((doc) => ({
      id: doc.id,
      ...(doc.data() as Omit<Group, "id">),
   }));
   return categoryList;
}

export default async function CategoriesPage() {
   const categories = await getCategories();

   return (
      <div className="container mx-auto px-4 py-8">
         <h1 className="text-3xl font-bold mb-6 text-center">قائمة الفئات</h1>
         <CategoriesTable categories={categories} />
      </div>
   );
}


============================================================
FILE: src/app/dashboard/edit-product/[id]/EditProductForm.tsx
============================================================
"use client";

import { useEffect, useState } from "react";
import { useFormState, useFormStatus } from "react-dom";
import Input from "@/components/ui/Input";
import Button from "@/components/Button";
import UploadImage from "@/components/ui/UploadImage";
import { ProductResponse, updateProduct } from "./actions";
import { getCategories } from "@/app/dashboard/add-product/actions";

interface Category {
   id: string;
   name: string;
}

interface Product {
   id: string;
   name: string;
   price: number;
   description: string;
   imageUrl: string;
   categoryId: string;
}

const initialState: ProductResponse = {
   message: "",
   success: false,
};

function SubmitButton() {
   const { pending } = useFormStatus();

   return (
      <Button
         type="submit"
         className="w-full"
         aria-disabled={pending}
         variant="primary"
         size="default"
      >
         {pending ? "جاري التحديث..." : "تحديث المنتج"}
      </Button>
   );
}

export default function EditProductForm({
   product,
   categoryId,
}: {
   product: Product;
   categoryId: string;
}) {
   const updateProductWithIdAndCategory = updateProduct.bind(
      null,
      product.id,
      categoryId
   );
   const [state, formAction] = useFormState(
      updateProductWithIdAndCategory,
      initialState
   );
   const [categories, setCategories] = useState<Category[]>([]);

   useEffect(() => {
      async function fetchCategories() {
         const fetchedCategories = await getCategories();
         setCategories(fetchedCategories as Category[]);
      }
      fetchCategories();
   }, []);

   return (
      <form action={formAction} className="space-y-6">
         <input type="hidden" name="id" value={product.id} />
         <input type="hidden" name="oldImage" value={product.image} />
         <div>
            <label
               htmlFor="name"
               className="block text-sm font-medium text-gray-700"
            >
               اسم المنتج
            </label>
            <Input
               type="text"
               id="name"
               name="name"
               defaultValue={product.name}
               className="mt-1"
               placeholder="مثال: بيتزا مارجريتا"
               required
            />
         </div>

         <div>
            <label
               htmlFor="description"
               className="block text-sm font-medium text-gray-700"
            >
               الوصف
            </label>
            <textarea
               id="description"
               name="description"
               defaultValue={product.description}
               rows={3}
               className="block w-full px-3 py-2 mt-1 text-gray-900 bg-white border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
               placeholder="وصف المنتج..."
               required
            ></textarea>
         </div>

         <div>
            <label
               htmlFor="categoryId"
               className="block text-sm font-medium text-gray-700"
            >
               الفئة
            </label>
            <select
               id="categoryId"
               name="categoryId"
               defaultValue={product.categoryId}
               className="block w-full px-3 py-2 mt-1 text-gray-900 bg-white border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
               required
            >
               <option value="">اختر فئة</option>
               {categories.map((category) => (
                  <option key={category.id} value={category.id}>
                     {category.name}
                  </option>
               ))}
            </select>
         </div>

         <div>
            <label
               htmlFor="price"
               className="block text-sm font-medium text-gray-700"
            >
               السعر
            </label>
            <Input
               type="number"
               id="price"
               name="price"
               defaultValue={product.price}
               placeholder="مثال: 50.00"
               required
               step="0.01"
               className="mt-1"
            />
         </div>

         <div>
            <UploadImage name="image" />
         </div>

         <SubmitButton />

         {state?.message && (
            <p
               className={`mt-2 text-sm ${
                  state.success ? "text-green-600" : "text-red-600"
               }`}
               aria-live="polite"
            >
               {state.message}
            </p>
         )}
      </form>
   );
}


============================================================
FILE: src/app/dashboard/edit-product/[id]/page.tsx
============================================================
import { db } from "@/lib/firebase";
import { doc, getDoc } from "firebase/firestore";
import EditProductForm from "./EditProductForm";

async function getProduct(categoryId: string | undefined, productId: string) {
   if (!categoryId || !productId) {
      return null;
   }
   const docRef = doc(db, "categories", categoryId, "products", productId);
   const docSnap = await getDoc(docRef);

   if (docSnap.exists()) {
      return { id: docSnap.id, ...docSnap.data() };
   } else {
      return null;
   }
}

export default async function EditProductPage({
   params,
   searchParams,
}: {
   params: { id: string };
   searchParams: { [key: string]: string | string[] | undefined };
}) {
   const { id } = params;
   const categoryIdParam = searchParams?.categoryId;

   const categoryId = Array.isArray(categoryIdParam)
      ? categoryIdParam[0]
      : categoryIdParam;

   const product = await getProduct(categoryId, id);

   if (!product) {
      return <div>المنتج غير موجود أو الرابط غير صحيح</div>;
   }

   return (
      <div className="container mx-auto px-4 py-8">
         <h1 className="text-3xl font-bold mb-6 text-center">تعديل المنتج</h1>
         <EditProductForm product={product} categoryId={categoryId} />

      </div>
   );
}


============================================================
FILE: src/app/dashboard/products/page.tsx
============================================================
import { Product, Group } from "@/types";
import ProductsTable from "./ProductsTable";

async function getProducts() {
   const res = await fetch(`${process.env.NEXT_PUBLIC_API_URL}/api/groups`, {
      next: { revalidate: 60 },
   });

   if (!res.ok) {
      console.error(await res.text());
      throw new Error("Failed to fetch data");
   }

   const groups = await res.json();

   if (!Array.isArray(groups)) {
      console.error("Fetched data is not an array:", groups);
      return [];
   }

   const productsWithCategory = groups.flatMap((group: Group) =>
      (group.products || []).map((product: Product) => ({
         ...product,
         image_url: product.imageUrl, // map imageUrl to image_url
         categoryName: group.name,
         categoryId: group.id,
      }))
   );

   return productsWithCategory;
}

export default async function ProductsPage() {
   const products = await getProducts();

   return (
      <div className="container mx-auto px-4 py-8">
         <h1 className="text-3xl font-bold mb-6 text-center">قائمة المنتجات</h1>
         <ProductsTable products={products} />
      </div>
   );
}


============================================================
FILE: src/app/dashboard/products/ProductsTable.tsx
============================================================
"use client";

import { Product } from "@/types";
import Image from "next/image";
import { deleteProduct } from "./actions";
import { useState } from "react";
import { useRouter } from "next/navigation";

interface ProductWithCategory extends Product {
   categoryName: string;
   categoryId: string;
}

interface ProductsTableProps {
   products: ProductWithCategory[];
}

const ProductsTable = ({ products }: ProductsTableProps) => {
   const router = useRouter();
   const [deleting, setDeleting] = useState<string | null>(null);

   const handleDelete = async (categoryId: string, productId: string) => {
      if (!confirm("هل أنت متأكد من حذف المنتج؟")) return;
      setDeleting(productId);

      try {
         const result = await deleteProduct(categoryId, productId);
         if (!result.success) {
            alert(result.message);
         }
      } catch (error) {
         alert("حدث خطأ أثناء الحذف.");
      } finally {
         setDeleting(null);
      }
   };

   const handleEditting = (product: ProductWithCategory) => {
      if (product.id) {
         router.push(
            `/dashboard/edit-product/${product.id}?categoryId=${product.categoryId}`
         );
      }
   };

   if (products.length === 0) {
      return (
         <div className="text-center py-6 text-gray-500">لا توجد منتجات</div>
      );
   }

   return (
      <div className="overflow-x-auto">
         <table className="min-w-full bg-white rounded-lg shadow-md">
            <thead className="bg-gray-200 text-gray-600 uppercase text-sm leading-normal">
               <tr>
                  <th className="py-3 px-6 text-right">الصورة</th>
                  <th className="py-3 px-6 text-right">الاسم</th>
                  <th className="py-3 px-6 text-center hidden md:table-cell">
                     الصنف
                  </th>
                  <th className="py-3 px-6 text-center">السعر</th>
                  <th className="py-3 px-6 text-center">الإجراءات</th>
               </tr>
            </thead>
            <tbody className="text-gray-600 text-sm font-light">
               {products.map((product) => (
                  <tr
                     key={product.id}
                     className="border-b border-gray-200 hover:bg-gray-100"
                  >
                     <td className="py-3 px-6 text-right whitespace-nowrap">
                        <Image
                           src={product.image_url || "/placeholder.png"}
                           alt={product.name}
                           width={64}
                           height={64}
                           className="rounded-lg object-cover"
                           unoptimized
                        />
                     </td>
                     <td className="py-3 px-6 text-right">
                        <div className="flex flex-col">
                           <span className="font-semibold">{product.name}</span>
                           <span className="text-xs text-gray-500 md:hidden">
                              {product.categoryName}
                           </span>
                        </div>
                     </td>
                     <td className="py-3 px-6 text-center hidden md:table-cell">
                        <span className="bg-gray-200 text-gray-600 py-1 px-3 rounded-full text-xs">
                           {product.categoryName}
                        </span>
                     </td>
                     <td className="py-3 px-6 text-center">
                        {product.price !== null ? (
                           <span className="font-semibold">
                              {product.price} جنيه
                           </span>
                        ) : (
                           <span className="text-gray-400">متعدد الأسعار</span>
                        )}
                     </td>
                     <td className="py-3 px-6 text-center">
                        <div className="flex items-center justify-center gap-2">
                           <button
                              className="w-8 h-8 rounded-xl bg-blue-500 text-white flex items-center justify-center hover:bg-blue-600"
                              onClick={() => handleEditting(product)}
                           >
                              <svg
                                 xmlns="http://www.w3.org/2000/svg"
                                 className="h-5 w-5"
                                 fill="none"
                                 viewBox="0 0 24 24"
                                 stroke="currentColor"
                              >
                                 <path
                                    strokeLinecap="round"
                                    strokeLinejoin="round"
                                    strokeWidth="2"
                                    d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.5L16.732 3.732z"
                                 />
                              </svg>
                           </button>
                           <button
                              disabled={deleting === product.id}
                              onClick={() =>
                                 product.id &&
                                 handleDelete(product.categoryId, product.id)
                              }
                              className={`w-8 h-8 rounded-xl text-white flex items-center justify-center hover:bg-red-600 ${
                                 deleting === product.id
                                    ? "bg-gray-400 cursor-not-allowed"
                                    : "bg-red-500"
                              }`}
                           >
                              <svg
                                 xmlns="http://www.w3.org/2000/svg"
                                 className="h-5 w-5"
                                 fill="none"
                                 viewBox="0 0 24 24"
                                 stroke="currentColor"
                              >
                                 <path
                                    strokeLinecap="round"
                                    strokeLinejoin="round"
                                    strokeWidth="2"
                                    d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"
                                 />
                              </svg>
                           </button>
                        </div>
                     </td>
                  </tr>
               ))}
            </tbody>
         </table>
      </div>
   );
};

export default ProductsTable;


============================================================
FILE: src/app/dashboard/layout.tsx
============================================================
import Link from "next/link";

export default function DashboardLayout({
   children,
}: {
   children: React.ReactNode;
}) {
   return (
      <div>
         <nav className="bg-gray-800 p-4 text-white">
            <div className="container mx-auto flex justify-between">
               <div className="flex space-x-4">
                  <Link
                     href="/dashboard/products"
                     className="hover:bg-gray-700 px-3 py-2 rounded-md text-sm font-medium"
                  >
                     المنتجات
                  </Link>
                  <Link
                     href="/dashboard/category"
                     className="hover:bg-gray-700 px-3 py-2 rounded-md text-sm font-medium"
                  >
                     الفئات
                  </Link>
                  <Link
                     href="/dashboard/add-product"
                     className="hover:bg-gray-700 px-3 py-2 rounded-md text-sm font-medium"
                  >
                     إضافة منتج
                  </Link>
                  <Link
                     href="/dashboard/add-category"
                     className="hover:bg-gray-700 px-3 py-2 rounded-md text-sm font-medium"
                  >
                     إضافة صنف
                  </Link>
               </div>
            </div>
         </nav>
         <main className="p-4">{children}</main>
      </div>
   );
}


============================================================
FILE: src/app/globals.css
============================================================
@import url("https://fonts.googleapis.com/css2?family=IBM+Plex+Sans+Arabic:wght@400;700&display=swap");
@import "tailwindcss";

:root {
   --background: #ffffff;
   --foreground: #000000;
   --header-bg-url: url("/664cbcc62ef68.png");
}
@theme inline {
   --color-background: var(--background);
   --color-foreground: var(--foreground);
   --font-sans: var(--font-geist-sans);
   --font-mono: var(--font-geist-mono);
}

body {
   font-family: "IBM Plex Sans Arabic", sans-serif;
   background: var(--background);
   color: var(--foreground);
}
@theme {
   --color-primary: #761005;
   --color-primary-transparent: rgba(118, 16, 5, 0.7);
}
@layer utilities {
   .header-bg-url {
      background-image: var(--header-bg-url);
   }
}

html {
   scroll-behavior: smooth;
}

.no-scrollbar::-webkit-scrollbar {
   display: none;
}
.no-scrollbar {
   -ms-overflow-style: none;
   scrollbar-width: none;
}

/* src/app/globals.css */


============================================================
FILE: src/app/layout.js
============================================================
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import { IBM_Plex_Sans_Arabic } from "next/font/google";

const ibmArabic = IBM_Plex_Sans_Arabic({
   subsets: ["arabic"],
   weight: ["100", "200", "300", "400", "500", "600", "700"],
   variable: "--font-ibm-arabic",
   display: "swap",
});

const geistSans = Geist({
   variable: "--font-geist-sans",
   subsets: ["latin"],
});

const geistMono = Geist_Mono({
   variable: "--font-geist-mono",
   subsets: ["latin"],
});

export const metadata = {
   title: "Restrunt Menu",
   description: "Ibn Elsham Restrunt is a resturant in Elsham, Egypt",
};

import { AuthProvider } from "@/context/AuthContext";
import { StrictMode } from "react";

export default function RootLayout({ children }) {
   return (
      <StrictMode>
         <html lang="ar" dir="rtl">
            <body
               className={`${ibmArabic.variable} ${geistSans.variable} ${geistMono.variable}`}
            >
               <AuthProvider>{children}</AuthProvider>
            </body>
         </html>
      </StrictMode>
   );
}


============================================================
FILE: src/app/not-found.jsx
============================================================
export default function notFound() {
  return (
    <div className="flex flex-col items-center justify-center h-screen">
      <h1 className="text-4xl font-bold text-red-600">404 - Not Found!</h1>
    </div>
  );
}
export const metadata = {
  title: "Not Found",
};


============================================================
FILE: src/app/page.js
============================================================
import { redirect } from "next/navigation";

export default function Home() {
  redirect("/menu");
}


============================================================
FILE: src/components/auth/AuthLink.jsx
============================================================
import Link from "next/link";

const AuthLink = ({ href, children }) => {
  return (
    <Link
      href={href}
      className="font-medium text-indigo-600 hover:text-indigo-500"
    >
      {children}
    </Link>
  );
};

export default AuthLink;


============================================================
FILE: src/components/auth/FormWrapper.jsx
============================================================
import React from "react";

const FormWrapper = ({ title, children }) => {
  return (
    <div className="flex items-center justify-center min-h-screen bg-gray-50">
      <div className="w-full max-w-md p-8 space-y-6 bg-white rounded-lg shadow-md">
        <h2 className="text-2xl font-bold text-center text-gray-900">
          {title}
        </h2>
        {children}
      </div>
    </div>
  );
};

export default FormWrapper;


============================================================
FILE: src/components/ui/Alert.jsx
============================================================
import React from "react";

const Alert = ({ type, message }) => {
  const baseClasses = "p-3 text-sm rounded-md";
  const typeClasses = {
    success: "text-white bg-green-500",
    error: "text-white bg-red-500",
  };

  if (!message) return null;

  return (
    <div className={`${baseClasses} ${typeClasses[type] || typeClasses.error}`}>
      {message}
    </div>
  );
};

export default Alert;


============================================================
FILE: src/components/ui/Input.tsx
============================================================
import React, { InputHTMLAttributes } from "react";

interface InputProps extends InputHTMLAttributes<HTMLInputElement> {
   label?: string;
   icon?: React.ReactNode;
   error?: string;
   name: string;
}

const Input = ({
   label,
   icon,
   error,
   name,
   className,
   ...props
}: InputProps) => {
   const inputId = props.id || name;

   return (
      <div className="w-full">
         {label && (
            <label
               htmlFor={inputId}
               className="block text-sm font-medium text-gray-700 mb-1"
            >
               {label}
            </label>
         )}
         <div className="relative flex items-center">
            {icon && (
               <div className="absolute inset-y-0 inline-0 px-3 flex items-center pointer-events-none">
                  {icon}
               </div>
            )}
            <input
               id={inputId}
               name={name}
               className={`appearance-none block w-full border rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-primary focus:border-primary sm:text-sm h-10 ${
                  icon ? "px-10" : "px-3"
               } ${error ? "border-red-500" : "border-gray-300"} text-right ${className}`}
               {...props}
            />
         </div>
         {error && <p className="mt-2 text-sm text-red-600">{error}</p>}
      </div>
   );
};

export default Input;


============================================================
FILE: src/components/ui/Select.jsx
============================================================
const Select = ({ label, name, options, disabled, ...props }) => {
  const selectId = props.id || name;

  return (
    <div className="w-full">
      {label && (
        <label
          htmlFor={selectId}
          className="block text-sm font-medium text-gray-700 mb-1"
        >
          {label}
        </label>
      )}
      <select
        id={selectId}
        name={name}
        disabled={disabled}
        className="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 disabled:bg-gray-200"
        {...props}
      >
        <option value="" disabled>
          Select a category
        </option>
        {options.map((option) => (
          <option key={option.id} value={option.id}>
            {option.name}
          </option>
        ))}
      </select>
    </div>
  );
};

export default Select;


============================================================
FILE: src/components/ui/UploadImage.tsx
============================================================
"use client";

import { useState, useRef } from "react";
import Image from "next/image";

interface UploadImageProps {
  name: string;
  "aria-label"?: string;
  accept?: string;
  required?: boolean;
}

const UploadImage = ({ name, ...props }: UploadImageProps) => {
  const [preview, setPreview] = useState<string | null>(null);
  const fileInputRef = useRef<HTMLInputElement>(null);

  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      const reader = new FileReader();
      reader.onloadend = () => {
        setPreview(reader.result as string);
      };
      reader.readAsDataURL(file);
    } else {
      setPreview(null);
    }
  };

  const handleRemoveImage = (e: React.MouseEvent<HTMLButtonElement>) => {
    e.preventDefault();
    setPreview(null);
    if (fileInputRef.current) {
      fileInputRef.current.value = "";
    }
  };

  return (
    <div className="flex flex-col items-center justify-center w-full">
      <label
        htmlFor={name}
        className="relative flex flex-col items-center justify-center w-full h-64 border-2 border-gray-300 border-dashed rounded-lg cursor-pointer bg-gray-50 hover:bg-gray-100"
      >
        {preview ? (
          <>
            <Image
              src={preview}
              alt="Preview"
              fill
              style={{ objectFit: "contain" }}
              className="rounded-lg"
            />
            <button
              type="button"
              onClick={handleRemoveImage}
              className="absolute top-2 right-2 z-10 p-1 bg-red-600 rounded-full text-white hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500"
              aria-label="Remove image"
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                className="w-4 h-4"
                viewBox="0 0 20 20"
                fill="currentColor"
              >
                <path
                  fillRule="evenodd"
                  d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z"
                  clipRule="evenodd"
                />
              </svg>
            </button>
          </>
        ) : (
          <div className="flex flex-col items-center justify-center pt-5 pb-6">
            <svg
              className="w-8 h-8 mb-4 text-gray-500"
              aria-hidden="true"
              xmlns="http://www.w3.org/2000/svg"
              fill="none"
              viewBox="0 0 20 16"
            >
              <path
                stroke="currentColor"
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth="2"
                d="M13 13h3a3 3 0 0 0 0-6h-.025A5.56 5.56 0 0 0 16 6.5 5.5 5.5 0 0 0 5.207 5.021C5.137 5.017 5.071 5 5 5a4 4 0 0 0 0 8h2.167M10 15V6m0 0L8 8m2-2 2 2"
              />
            </svg>
            <p className="mb-2 text-sm text-gray-500">
              <span className="font-semibold">Click to upload</span> or drag and
              drop
            </p>
            <p className="text-xs text-gray-500">
              SVG, PNG, JPG or GIF
            </p>
          </div>
        )}
        <input
          id={name}
          name={name}
          type="file"
          className="hidden"
          ref={fileInputRef}
          onChange={handleFileChange}
          {...props}
        />
      </label>
    </div>
  );
};

export default UploadImage;


============================================================
FILE: src/components/Button.jsx
============================================================
"use client";

const Button = ({
  children,
  className,
  variant,
  size,
  type = "button",
  ...props
}) => {
  const baseClasses =
    "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 cursor-pointer";

  const variants = {
    default:
      "bg-primary text-primary-foreground hover:bg-primary/90 text-white",
    destructive:
      "bg-destructive text-destructive-foreground hover:bg-destructive/90",
    outline:
      "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
    secondary: "bg-secondary text-secondary-foreground hover:bg-secondary/80",
    ghost: "hover:bg-accent hover:text-accent-foreground",
    link: "text-primary underline-offset-4 hover:underline",
  };

  const sizes = {
    default: "h-10 px-4 py-2",
    sm: "h-9 rounded-md px-3",
    lg: "h-11 rounded-md px-8",
    icon: "h-10 w-10",
    minIcon: "h-6 w-6",
  };

  const variantClasses = variants[variant] || variants.default;
  const sizeClasses = sizes[size] || sizes.default;

  return (
    <button
      type={type}
      className={`${baseClasses} ${variantClasses} ${sizeClasses} ${className}`}
      {...props}
    >
      {children}
    </button>
  );
};

export default Button;


============================================================
FILE: src/components/LogoutButton.jsx
============================================================
"use client";

import useLogout from "@/features/public/hooks/useLogout";

const LogoutButton = ({ className = "" }) => {
  const { handleLogout } = useLogout();

  return (
    <button
      onClick={handleLogout}
      className={`px-4 py-2 text-sm font-medium text-white bg-red-600 rounded-md hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 ${className}`}
    >
      تسجيل الخروج
    </button>
  );
};

export default LogoutButton;


============================================================
FILE: src/context/AuthContext.jsx
============================================================
"use client";

import { createContext, useContext, useEffect, useState } from "react";
import { auth } from "../lib/firebase";
import { onAuthStateChanged } from "firebase/auth";
import { useRouter } from "next/navigation";

// Create the authentication context
const AuthContext = createContext();

// Custom hook to use the auth context
export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error("useAuth must be used within an AuthProvider");
  }
  return context;
};

// Authentication provider component
export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);
  const router = useRouter();

  useEffect(() => {
    // Subscribe to auth state changes
    const unsubscribe = onAuthStateChanged(auth, (currentUser) => {
      setUser(currentUser);
      setLoading(false);
    });

    // Cleanup subscription on unmount
    return () => unsubscribe();
  }, []);

  // Value to be provided by the context
  const value = {
    user,
    loading,
    isAuthenticated: !!user,
  };

  return (
    <AuthContext.Provider value={value}>
      {!loading && children}
    </AuthContext.Provider>
  );
};


============================================================
FILE: src/store/cartStore.js
============================================================
import { create } from "zustand";
import { persist } from "zustand/middleware";

const useCartStore = create(
  persist(
    (set, get) => ({
      items: [],
      addToCart: (product, quantity = 1, notes = "") => {
        const items = get().items;
        const existingIndex = items.findIndex(
          (item) => item.product.id === product.id,
        );
        if (existingIndex !== -1) {
          const updatedItems = [...items];
          updatedItems[existingIndex] = {
            ...updatedItems[existingIndex],
            quantity: updatedItems[existingIndex].quantity + quantity,
            notes: notes || updatedItems[existingIndex].notes,
          };
          set({ items: updatedItems });
        } else {
          set({
            items: [...items, { product, quantity, notes }],
          });
        }
      },
      updateQuantity: (productId, quantity) => {
        set((state) => ({
          items: state.items.map((item) =>
            item.product.id === productId
              ? { ...item, quantity: Math.max(1, quantity) }
              : item,
          ),
        }));
      },
      removeFromCart: (productId) => {
        set((state) => ({
          items: state.items.filter((item) => item.product.id !== productId),
        }));
      },
      clearCart: () => set({ items: [] }),
      getSubtotal: () => {
        const items = get().items;
        return items.reduce((total, item) => {
          const { product, quantity } = item;
          const { price } = product;
          return total + price * quantity;
        }, 0);
      },
      getTotalItems: () => {
        const items = get().items;
        return items.reduce((sum, item) => sum + item.quantity, 0);
      },
    }),
    {
      name: "cart-storage", // unique name for the localStorage key
    },
  ),
);

export default useCartStore;


============================================================
FILE: src/middleware.js
============================================================
import { NextResponse } from "next/server";

// This function can be marked `async` if using `await` inside
export function middleware(request) {
  // Bypass middleware for Server Actions
  if (request.headers.has("x-nextjs-data")) {
    return NextResponse.next();
  }

  // Get the pathname of the request
  const path = request.nextUrl.pathname;
  console.log(request);
  // Define public paths that don't require authentication
  const isAuthPublicPath =
    path === "/login" ||
    path === "/register" ||
    path === "/reset-password" ||
    path === "/";
  const isPublicPath = isAuthPublicPath || path === "/menu";

  // Get the token from the cookies
  const token = request.cookies.get("authToken")?.value || "";

  // If the path is public and the user is logged in, redirect to the menu page
  if (isAuthPublicPath && token) {
    return NextResponse.redirect(new URL("/menu", request.url));
  }

  // If the path is not public and the user is not logged in, redirect to the login page
  if (!isPublicPath && !token) {
    // Store the original URL to redirect back after login
    const url = new URL("/login", request.url);
    url.searchParams.set("callbackUrl", path);
    return NextResponse.redirect(url);
  }

  return NextResponse.next();
}

// See "Matching Paths" below to learn more
export const config = {
  matcher: [
    // Match all paths except for:
    // - API routes (/api/...)
    // - Static files routes (/_next/...)
    // - Public files (files with extensions like .png, .jpg, .ico, etc.)
    "/((?!api|_next/static|_next/image|.*\\..*).*)",
  ],
};


============================================================
FILE: db.json
============================================================
{
   "groups": [
      {
         "id": "11b89031-9b92-4c25-bee6-0b4f2799ce2d",
         "name": "إعلانات",
         "image_url": null,
         "products": [
            {
               "id": "1a9136c3-0d2e-462b-9b79-01f3780194ae",
               "categoryId": "11b89031-9b92-4c25-bee6-0b4f2799ce2d",
               "name": "..",
               "description": "..",
               "image_url": "https://media-files.tryordersystem.com/menu/ibnsham/1a9136c3-0d2e-462b-9b79-01f3780194ae/687b92a56454b.png",
               "price": 0,
               "price_before_discount": null,
               "out_of_stock": false,
               "variants": []
            }
         ]
      },
      {
         "id": "e56d66b7-bb4e-44c0-a29f-56ffe6b08067",
         "name": "شاورما سجق",
         "image_url": "https://media-files.tryordersystem.com/menu/ibnsham/f24db966-110c-4338-aa4c-000cab700f32/683ef721e163f.jpeg",
         "products": [
            {
               "id": "4c8f31c7-d2b6-4d4e-a9a8-10c75bba8cc1",
               "categoryId": "e56d66b7-bb4e-44c0-a29f-56ffe6b08067",
               "name": "شاورما سجق شيك",
               "description": "عبارة عن شاورما سجق مع صوص كوكتيل +طماطم +بطاطا فعلبة واحدة",
               "image_url": "https://media-files.tryordersystem.com/menu/ibnsham/4c8f31c7-d2b6-4d4e-a9a8-10c75bba8cc1/6837170ce8682.jpeg",
               "price": 95,
               "price_before_discount": null,
               "out_of_stock": false,
               "variants": []
            },
            {
               "id": "15b8b21c-7c1d-4f3c-ac41-4e287279d021",
               "categoryId": "e56d66b7-bb4e-44c0-a29f-56ffe6b08067",
               "name": "ساندوتش شاورما سجق",
               "description": null,
               "image_url": "https://media-files.tryordersystem.com/menu/ibnsham/15b8b21c-7c1d-4f3c-ac41-4e287279d021/685ffb6f1cf46.png",
               "price": null,
               "price_before_discount": null,
               "out_of_stock": false,
               "variants": [
                  { "id": "variant_s_sausage_saj", "name": "صاج", "price": 85 },
                  {
                     "id": "variant_s_sausage_kaiser",
                     "name": "كايزر",
                     "price": 75
                  }
               ]
            },
            {
               "id": "dd36487a-ec4b-4786-acb8-2749fff71bad",
               "categoryId": "e56d66b7-bb4e-44c0-a29f-56ffe6b08067",
               "name": "فته شاورما سجق",
               "description": "فته شاورما سجق",
               "image_url": "https://media-files.tryordersystem.com/menu/ibnsham/dd36487a-ec4b-4786-acb8-2749fff71bad/683ef74fe75b9.jpeg",
               "price": 120,
               "price_before_discount": null,
               "out_of_stock": false,
               "variants": []
            },
            {
               "id": "f24db966-110c-4338-aa4c-000cab700f32",
               "categoryId": "e56d66b7-bb4e-44c0-a29f-56ffe6b08067",
               "name": "شاورما سجق بالوزن",
               "description": "تقدم مع صوص كوكتيل +كلوسلو +مخلل خيار +طماطم +بطاطا",
               "image_url": "https://media-files.tryordersystem.com/menu/ibnsham/f24db966-110c-4338-aa4c-000cab700f32/683ef721e163f.jpeg",
               "price": null,
               "price_before_discount": null,
               "out_of_stock": false,
               "variants": [
                  {
                     "id": "variant_w_sausage_250",
                     "name": "ربع كيلو",
                     "price": 180
                  },
                  {
                     "id": "variant_w_sausage_500",
                     "name": "نصف كيلو",
                     "price": 350
                  },
                  {
                     "id": "variant_w_sausage_1000",
                     "name": "كيلو",
                     "price": 680
                  }
               ]
            }
         ]
      },
      {
         "id": "d4fd535d-5bb5-4312-9ad3-5f4424d1bcd4",
         "name": "شوربة و مقبلات",
         "image_url": "https://media-files.tryordersystem.com/menu/ibnsham/d4fd535d-5bb5-4312-9ad3-5f4424d1bcd4/65dde0dcaf9a7.jpeg",
         "products": [
            {
               "id": "08cc9eab-efe5-44ab-b1a4-6610b59cb6fe",
               "categoryId": "d4fd535d-5bb5-4312-9ad3-5f4424d1bcd4",
               "name": "مخلل خيار كبير",
               "description": null,
               "image_url": "https://media-files.tryordersystem.com/menu/ibnsham/08cc9eab-efe5-44ab-b1a4-6610b59cb6fe/685ff9fc2e061.png",
               "price": 80,
               "price_before_discount": null,
               "out_of_stock": false,
               "variants": []
            },
            {
               "id": "dec82047-99b4-548e-bebb-b9c9ba0fe3ab",
               "categoryId": "d4fd535d-5bb5-4312-9ad3-5f4424d1bcd4",
               "name": "بطاطس مدوره",
               "description": null,
               "image_url": "https://media-files.tryordersystem.com/ibnsham/1/ZpHebw9fKMg_OM5sKZITsRE4_0vA9DmI.jpg",
               "price": 55,
               "price_before_discount": null,
               "out_of_stock": false,
               "variants": []
            },
            {
               "id": "e10cc09e-7627-56cb-9916-16f9c79a22b5",
               "categoryId": "d4fd535d-5bb5-4312-9ad3-5f4424d1bcd4",
               "name": "طبق حمص شاورما فراخ",
               "description": "(صوص حمص يعلوه شرائح الشاورما فراخ الذهبية لذيذه )",
               "image_url": "https://media-files.tryordersystem.com/ibnsham/1/o3HUkJUzWUCQv99jFdtb8_BE-b1xgdQx.jpg",
               "price": 220,
               "price_before_discount": null,
               "out_of_stock": false,
               "variants": []
            },
            {
               "id": "3e3e2bba-6064-5afa-ad6d-8f571c5af3c9",
               "categoryId": "d4fd535d-5bb5-4312-9ad3-5f4424d1bcd4",
               "name": "سمبوسك جبنه سوريه",
               "description": null,
               "image_url": "https://media-files.tryordersystem.com/menu/ibnsham/3e3e2bba-6064-5afa-ad6d-8f571c5af3c9/68613544998d0.png",
               "price": 25,
               "price_before_discount": null,
               "out_of_stock": false,
               "variants": []
            }
         ]
      },
      {
         "id": "2072b7d1-675b-58fc-9cdb-71cd2db616f1",
         "name": "عروض توفير ابن الشام",
         "image_url": "https://media-files.tryordersystem.com/menu/ibnsham/2072b7d1-675b-58fc-9cdb-71cd2db616f1/65dde044d29f5.jpeg",
         "products": [
            {
               "id": "065c3368-5f51-4a1b-a6a9-391be9ce7848",
               "categoryId": "2072b7d1-675b-58fc-9cdb-71cd2db616f1",
               "name": "صينيه الحوت",
               "description": "3سيخ كفته لحم مشوي+3 سيخ نقانق +3 ورك مشوي +بصل وبندوره مشوي+كيلو ونص ارز+ثوميه ص+حمص ص+سلطه خضرا ص+مخلل مشكل ص (تكفي من 4 الي 5 اشخاص)",
               "image_url": "https://media-files.tryordersystem.com/menu/ibnsham/065c3368-5f51-4a1b-a6a9-391be9ce7848/66fadb9a94ab9.jpeg",
               "price": 699,
               "price_before_discount": 750,
               "out_of_stock": false,
               "variants": []
            },
            {
               "id": "4bd29e71-848c-5569-83db-e62c59d0cea8",
               "categoryId": "2072b7d1-675b-58fc-9cdb-71cd2db616f1",
               "name": "صينيه السلطان",
               "description": "فرخه على الفحم + نص كيلو شيش + نص كيلو كفته + نص كيلو كباب ( شقف ) + 2 كيلو ارز مطهي + 6 سلطه مشكلين ( طحينه + متبل + سلطه خضراء + توميه + زبادي ) + 4 ربطه عيش + 10 محمرة مشويه+ 1 كنافه ( تكفي من 6 الي 7 افراد )",
               "image_url": "https://media-files.tryordersystem.com/menu/ibnsham/4bd29e71-848c-5569-83db-e62c59d0cea8/686191832cbcb.jpeg",
               "price": 1999,
               "price_before_discount": null,
               "out_of_stock": false,
               "variants": []
            },
            {
               "id": "cf18c9ed-d698-5e8f-8440-919c00ee6c5d",
               "categoryId": "2072b7d1-675b-58fc-9cdb-71cd2db616f1",
               "name": "هاتريك 3 شاورما فراخ +بطاطس",
               "description": "3 شاورما فراخ عيش صاج",
               "image_url": "https://media-files.tryordersystem.com/menu/ibnsham/cf18c9ed-d698-5e8f-8440-919c00ee6c5d/6542817be249a.jpeg",
               "price": 315,
               "price_before_discount": 340,
               "out_of_stock": false,
               "variants": []
            }
         ]
      },
      {
         "id": "01e3f823-08e2-5ef9-8e93-f805ebb38e38",
         "name": "وجبات لحم مشوية",
         "image_url": "https://media-files.tryordersystem.com/menu/ibnsham/01e3f823-08e2-5ef9-8e93-f805ebb38e38/65dddf02e14c3.jpeg",
         "products": [
            {
               "id": "c45f4933-6a36-5411-8111-d5a2377e024e",
               "categoryId": "01e3f823-08e2-5ef9-8e93-f805ebb38e38",
               "name": "وجبه مشوي مشكل",
               "description": "( 4 اسياخ من كباب وكفته لحم وشيش طاوق صدور وكفته فراخ تقدم مع سلطه وحمص وعيش ومخلل )",
               "image_url": "https://media-files.tryordersystem.com/ibnsham/1/DQ60LQCBC2O4iC0OaCkB_BxetfSB1apM.jpg",
               "price": 395,
               "price_before_discount": null,
               "out_of_stock": false,
               "variants": []
            }
         ]
      },
      {
         "id": "f74f9970-2d2c-533c-99cb-8bf52eb4a3ac",
         "name": "وجبات لحم مدخن او فراخ مدخنة",
         "image_url": "https://media-files.tryordersystem.com/menu/ibnsham/f74f9970-2d2c-533c-99cb-8bf52eb4a3ac/65ddd9ca7611e.jpeg",
         "products": [
            {
               "id": "a35c8c01-8dcb-44d4-9494-16c43b2dd1b9",
               "categoryId": "f74f9970-2d2c-533c-99cb-8bf52eb4a3ac",
               "name": "وجبة وركين مدخنة +ارز",
               "description": "تقدم مع ارز وبطاطا وتومية عادى وتومية سباسى وعيش",
               "image_url": "https://media-files.tryordersystem.com/menu/ibnsham/a35c8c01-8dcb-44d4-9494-16c43b2dd1b9/6869789149e96.png",
               "price": 245,
               "price_before_discount": null,
               "out_of_stock": false,
               "variants": []
            }
         ]
      },
      {
         "id": "5dd9ceef-5332-544e-8c57-d8b8c4bad2d0",
         "name": "السلطات",
         "image_url": "https://media-files.tryordersystem.com/menu/ibnsham/5dd9ceef-5332-544e-8c57-d8b8c4bad2d0/65dde1293e2cc.jpeg",
         "products": [
            {
               "id": "79109e4d-3060-5b5d-8cd5-c90cc6475b34",
               "categoryId": "5dd9ceef-5332-544e-8c57-d8b8c4bad2d0",
               "name": "حمص",
               "description": null,
               "image_url": "https://media-files.tryordersystem.com/ibnsham/1/TEykm-HYf8AjH-8MYEbzolCGKBxZy4nl.jpg",
               "price": null,
               "price_before_discount": null,
               "out_of_stock": false,
               "variants": [
                  { "id": "variant_hummus_small", "name": "صغير", "price": 45 },
                  { "id": "variant_hummus_large", "name": "كبير", "price": 80 }
               ]
            }
         ]
      },
      {
         "id": "ec61b6f7-facd-5ca9-ace6-fac688faf683",
         "name": "وجبات فراخ مشوية",
         "image_url": "https://media-files.tryordersystem.com/menu/ibnsham/ec61b6f7-facd-5ca9-ace6-fac688faf683/65dddab63d60b.jpeg",
         "products": [
            {
               "id": "d9bbc7c3-9edf-55be-b03c-1bf90faf0543",
               "categoryId": "ec61b6f7-facd-5ca9-ace6-fac688faf683",
               "name": "ربع فرخه مشويه ع الفحم (ورك)",
               "description": "( ورك مشوي متبل طازج علي فحم تقدم مع بطاطس وارز وصوص توميه وعيش ومخلل)",
               "image_url": "https://media-files.tryordersystem.com/menu/ibnsham/d9bbc7c3-9edf-55be-b03c-1bf90faf0543/686019a482ccb.png",
               "price": 120,
               "price_before_discount": null,
               "out_of_stock": false,
               "variants": []
            }
         ]
      },
      {
         "id": "494141ff-f85e-567c-814c-911b41a82056",
         "name": "مشويات فراخ",
         "image_url": "https://media-files.tryordersystem.com/menu/ibnsham/494141ff-f85e-567c-814c-911b41a82056/65dddee27a771.jpeg",
         "products": [
            {
               "id": "36d3339b-842c-5de3-ad1d-ac5732c9cb4c",
               "categoryId": "494141ff-f85e-567c-814c-911b41a82056",
               "name": "فرخه ع الفحم",
               "description": "( فراخ متبل طازج مشويه ع فحم تقدم مع بطاطس وصوص توميه وعيش )",
               "image_url": "https://media-files.tryordersystem.com/ibnsham/1/TCO5GVJaE4TW0Wz-Tz4NZgmfrSzwcyXv.jpg",
               "price": null,
               "price_before_discount": null,
               "out_of_stock": false,
               "variants": [
                  {
                     "id": "variant_grill_chicken_half",
                     "name": "نصف",
                     "price": 220
                  },
                  {
                     "id": "variant_grill_chicken_full",
                     "name": "كاملة",
                     "price": 435
                  }
               ]
            }
         ]
      },
      {
         "id": "3d0c758a-d390-5a14-b7b7-9cebd4384ac7",
         "name": "طواجن",
         "image_url": "https://media-files.tryordersystem.com/menu/ibnsham/3d0c758a-d390-5a14-b7b7-9cebd4384ac7/65dddb4c7b4a9.jpeg",
         "products": [
            {
               "id": "9245465b-769c-5365-8b5c-0b3438bbf057",
               "categoryId": "3d0c758a-d390-5a14-b7b7-9cebd4384ac7",
               "name": "طاجن كفته بالطماطم (1/4 كيلو)",
               "description": "( لحم متبل مفرود داخل طاجن يعلوه شرائح طماطم وفلفل الاخضر يقدم مع (ليمون ومخلل وعيش)",
               "image_url": "https://media-files.tryordersystem.com/ibnsham/1/-lw-rt6mddbejy89Ts8PcXYo69DT6eTl.jpg",
               "price": 275,
               "price_before_discount": null,
               "out_of_stock": false,
               "variants": []
            }
         ]
      },
      {
         "id": "6339a534-d85d-565a-8152-8a6a47fc3d65",
         "name": "مشويات لحم بالكيلو",
         "image_url": "https://media-files.tryordersystem.com/menu/ibnsham/6339a534-d85d-565a-8152-8a6a47fc3d65/65ddda75cfe9d.jpeg",
         "products": [
            {
               "id": "2356a1bc-b6aa-5b6c-bfd7-87caec2fccdd",
               "categoryId": "6339a534-d85d-565a-8152-8a6a47fc3d65",
               "name": "كباب (شقف)",
               "description": "(اسياخ من كباب مشويه متبل بطريقه مميزه تقدم مع عيش وبصل وطماطم وفلفل ومحمره مشويه )",
               "image_url": "https://media-files.tryordersystem.com/ibnsham/1/FffuqiPtC0xIcalHnlsd99WRA01TcmF5.jpg",
               "price": null,
               "price_before_discount": null,
               "out_of_stock": false,
               "variants": [
                  {
                     "id": "variant_kebab_250",
                     "name": "ربع كيلو",
                     "price": 350
                  },
                  {
                     "id": "variant_kebab_500",
                     "name": "نصف كيلو",
                     "price": 700
                  },
                  { "id": "variant_kebab_1000", "name": "كيلو", "price": 1350 }
               ]
            }
         ]
      },
      {
         "id": "93322e95-c843-5e89-9215-c76bca438f58",
         "name": "شاورما لحمة",
         "image_url": "https://media-files.tryordersystem.com/menu/ibnsham/93322e95-c843-5e89-9215-c76bca438f58/65dddcbca537b.jpeg",
         "products": [
            {
               "id": "86d986aa-6275-55b9-ac20-bc24c99a0473",
               "categoryId": "93322e95-c843-5e89-9215-c76bca438f58",
               "name": "ساندوتش شاورما لحم",
               "description": "(شرائح شاورما لحمه مع وشرائح بصل بقدونس وطماطم ومخلل لفت داخل الساندوتش)",
               "image_url": "https://media-files.tryordersystem.com/ibnsham/1/0bXPqU473MMxMIiMYyFIBk22L7AOwKGg.jpg",
               "price": null,
               "price_before_discount": null,
               "out_of_stock": false,
               "variants": [
                  {
                     "id": "variant_m_shawarma_saj",
                     "name": "صاج",
                     "price": 125
                  },
                  {
                     "id": "variant_m_shawarma_kaiser",
                     "name": "كايزر",
                     "price": 115
                  }
               ]
            }
         ]
      },
      {
         "id": "f70943e0-c09f-534a-9f11-a7de5f3c2097",
         "name": "شاورما فراخ",
         "image_url": "https://media-files.tryordersystem.com/menu/ibnsham/f70943e0-c09f-534a-9f11-a7de5f3c2097/65dde16a95a0c.jpeg",
         "products": [
            {
               "id": "c6ce57f6-4bcb-49cd-a0df-e04dce1fe3e4",
               "categoryId": "f70943e0-c09f-534a-9f11-a7de5f3c2097",
               "name": "شاورما شيك فراخ",
               "description": "75 جرام شاورما مع بطاطا وتوميه ومخلل ف علبه",
               "image_url": "https://media-files.tryordersystem.com/menu/ibnsham/c6ce57f6-4bcb-49cd-a0df-e04dce1fe3e4/6671eefbcc5dd.jpeg",
               "price": 85,
               "price_before_discount": null,
               "out_of_stock": false,
               "variants": []
            },
            {
               "id": "54185129-a05d-5f34-aab9-e96e8f31bd1f",
               "categoryId": "f70943e0-c09f-534a-9f11-a7de5f3c2097",
               "name": "تورته شاورما فراخ",
               "description": "( شرائح شاورما فراخ ذهبيه تتكون من 22 قطعه تكفي 4 اشخاص 2 دور/او44 قطعه تكفي 8 اشخاص 3 دور تقدم مع شرائح بطاطس وتوميه وكلو سلو ومخلل )",
               "image_url": "https://media-files.tryordersystem.com/ibnsham/1/uPLcYtNjQzo8gJskwYGxKRle4K5H4kAk.png",
               "price": null,
               "price_before_discount": null,
               "out_of_stock": false,
               "variants": [
                  {
                     "id": "variant_c_shawarma_cake_s",
                     "name": "دورين (تكفي 4 أفراد)",
                     "price": 450
                  },
                  {
                     "id": "variant_c_shawarma_cake_l",
                     "name": "3 أدوار (تكفي 8 أفراد)",
                     "price": 850
                  }
               ]
            }
         ]
      },
      {
         "id": "783f09c2-d665-5bc6-9331-6685cf4c7727",
         "name": "فراخ بروستد",
         "image_url": "https://media-files.tryordersystem.com/menu/ibnsham/783f09c2-d665-5bc6-9331-6685cf4c7727/65dde1c0c646e.jpeg",
         "products": [
            {
               "id": "6e547c01-5ce5-57c9-97c1-7c1ddcd9a2d5",
               "categoryId": "783f09c2-d665-5bc6-9331-6685cf4c7727",
               "name": "فرخه بروستد ٨ قطع",
               "description": "( قطع فراخ مقليه المقرمشه ذهبيه اللون تقدم مع بطاطس وصوص توميه وتوميه اسبايسي ومخلل وعيش )",
               "image_url": "https://media-files.tryordersystem.com/menu/ibnsham/6e547c01-5ce5-57c9-97c1-7c1ddcd9a2d5/6475e66079b50.jpeg",
               "price": 475,
               "price_before_discount": null,
               "out_of_stock": false,
               "variants": []
            },
            {
               "id": "51129a82-7c0b-5069-910c-4f6cb38d5446",
               "categoryId": "783f09c2-d665-5bc6-9331-6685cf4c7727",
               "name": "وجبه 3 قطع فراخ بروستد",
               "description": "( 3 قطع فراخ بروستد المقرمشه ذهبيه اللون تقدم مع بطاطس ارز بسمتي صوص توميه ومخلل وعيش )",
               "image_url": "https://media-files.tryordersystem.com/menu/ibnsham/51129a82-7c0b-5069-910c-4f6cb38d5446/64aeaba4a27fa.jpeg",
               "price": 155,
               "price_before_discount": null,
               "out_of_stock": false,
               "variants": []
            }
         ]
      },
      {
         "id": "4d842955-ddf1-5675-a9e2-14dc9137ffca",
         "name": "شاورما ميكس",
         "image_url": "https://media-files.tryordersystem.com/menu/ibnsham/4d842955-ddf1-5675-a9e2-14dc9137ffca/65dddf5709fbc.png",
         "products": [
            {
               "id": "42a3281b-e8ec-53c4-b28b-87c4abde1367",
               "categoryId": "4d842955-ddf1-5675-a9e2-14dc9137ffca",
               "name": "فته شاورما ميكس",
               "description": null,
               "image_url": "https://media-files.tryordersystem.com/menu/ibnsham/42a3281b-e8ec-53c4-b28b-87c4abde1367/686032c099774.png",
               "price": null,
               "price_before_discount": null,
               "out_of_stock": false,
               "variants": [
                  {
                     "id": "variant_mix_fatteh_s",
                     "name": "عادي",
                     "price": 130
                  },
                  { "id": "variant_mix_fatteh_l", "name": "كبير", "price": 150 }
               ]
            }
         ]
      }
   ] 
}

============================================================
FILE: eslint.config.mjs
============================================================
import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [...compat.extends("next/core-web-vitals")];

export default eslintConfig;


============================================================
FILE: jsconfig.json
============================================================
{
  "compilerOptions": {
    "paths": {
      "@/*": ["./src/*"]
    }
  }
}


============================================================
FILE: LICENSE
============================================================
MIT License

Copyright (c) [2025] [Abdul-Azim Alwakeil]

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.


============================================================
FILE: next.config.mjs
============================================================
/** @type {import('next').NextConfig} */
const nextConfig = {
   images: {
      remotePatterns: [
         {
            protocol: "https",
            hostname: "media-files.tryordersystem.com",
            port: "", 
            pathname: "/**",
         },
         {
            protocol: "https",
            hostname: "res.cloudinary.com",
            port: "",
            pathname: "/**",
         },
      ],
   },
};

export default nextConfig;


============================================================
FILE: package.json
============================================================
{
   "name": "menu-app",
   "version": "0.1.0",
   "private": true,
   "scripts": {
      "dev": "next dev",
      "build": "next build",
      "start": "next start",
      "lint": "next lint",
      "prepare": "husky"
   },
   "dependencies": {
      "@fortawesome/fontawesome-svg-core": "^6.7.2",
      "@fortawesome/free-solid-svg-icons": "^6.7.2",
      "@fortawesome/react-fontawesome": "^0.2.2",
      "@tanstack/react-query": "^5.83.0",
      "cloudinary": "^2.7.0",
      "firebase": "^12.0.0",
      "js-cookie": "^3.0.5",
      "next": "15.3.5",
      "next-cloudinary": "^6.16.0",
      "react": "^19.0.0",
      "react-dom": "^19.0.0",
      "zustand": "^5.0.7"
   },
   "devDependencies": {
      "@eslint/eslintrc": "^3",
      "@tailwindcss/postcss": "^4.1.11",
      "@types/react": "^19.1.10",
      "@types/react-dom": "^19.1.7",
      "autoprefixer": "^10.4.21",
      "eslint": "^9",
      "eslint-config-next": "15.3.5",
      "husky": "^9.1.7",
      "lint-staged": "^16.1.2",
      "prettier": "^3.6.2",
      "tailwindcss": "^4"
   },
   "lint-staged": {
      "**/*.{js,jsx}": [
         "eslint --fix",
         "prettier --write"
      ]
   }
}


============================================================
FILE: postcss.config.mjs
============================================================
const config = {
   plugins: {
      "@tailwindcss/postcss": {},
      autoprefixer: {},
   },
};

export default config;


============================================================
FILE: README.md
============================================================
# Menu App

A modern, full-stack web application for browsing a restaurant menu, managing a cart, and placing orders. The project also includes a dashboard for administrators to manage product categories and items.

## ✨ Features

- **User Authentication:** Secure login and registration functionality.
- **Product Catalog:** Browse menu items by category.
- **Shopping Cart:** Add/remove items and view order summary.
- **Checkout Process:** Simple and intuitive user information form for placing orders.
- **Admin Dashboard:** A separate interface for managing products and categories.
- **Responsive Design:** Fully responsive layout for a seamless experience on desktop and mobile devices.

## 🛠️ Technologies Used

- **Frontend:**
  - [Next.js](https://nextjs.org/) - React Framework
  - [React](https://reactjs.org/) - UI Library
  - [Tailwind CSS](https://tailwindcss.com/) - Utility-First CSS Framework
  - [Zustand](https://github.com/pmndrs/zustand) - State Management
  - [React Query](https://tanstack.com/query/latest) - Data Fetching and Caching
- **Backend/DB:**
  - [Firebase](https://firebase.google.com/) - Authentication & Database
- **Tooling:**
  - [ESLint](https://eslint.org/) - Code Linting
  - [Prettier](https://prettier.io/) - Code Formatting
  - [Husky](https://typicode.github.io/husky/) & [lint-staged](https://github.com/okonet/lint-staged) - Pre-commit Hooks

## 🚀 Getting Started

Follow these instructions to get a copy of the project up and running on your local machine for development and testing purposes.

### Prerequisites

- [Node.js](https://nodejs.org/en/) (v18 or later recommended)
- [npm](https://www.npmjs.com/) or [yarn](https://yarnpkg.com/)

### Installation

1.  **Clone the repository:**
    ```sh
    git clone https://github.com/your-username/menu-app.git
    cd menu-app
    ```

2.  **Install dependencies:**
    ```sh
    npm install
    ```

3.  **Set up environment variables:**
    Create a `.env.local` file in the root of the project and add the necessary Firebase configuration and API URL. You can use `.env.example` as a template:
    ```env
    # Firebase Config
    NEXT_PUBLIC_FIREBASE_API_KEY=your_api_key
    NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN=your_auth_domain
    NEXT_PUBLIC_FIREBASE_PROJECT_ID=your_project_id
    NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET=your_storage_bucket
    NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID=your_sender_id
    NEXT_PUBLIC_FIREBASE_APP_ID=your_app_id
    NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID=your_measurement_id

    # API URL (for db.json)
    NEXT_PUBLIC_API_URL=http://localhost:3001
    ```

### Running the Application

1.  **Start the local JSON server (if using `db.json`):**
    You may need to install `json-server` globally: `npm install -g json-server`.
    ```sh
    json-server --watch db.json --port 3001
    ```

2.  **Start the development server:**
    ```sh
    npm run dev
    ```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

## 📜 Available Scripts

In the project directory, you can run:

- `npm run dev`: Runs the app in development mode.
- `npm run build`: Builds the app for production.
- `npm run start`: Starts a production server.
- `npm run lint`: Runs ESLint to find and fix problems in your code.

## 📄 License

This project is distributed under the MIT License. See the `LICENSE` file for more information.


============================================================
FILE: tailwind.config.js
============================================================
const colors = require("tailwindcss/colors");

module.exports = {
  content: [
    "./src/**/*.{js,ts,jsx,tsx,css}",
    "./app/**/*.{js,ts,jsx,tsx}",
    "./components/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {
      fontFamily: {
        ibm: ["var(--font-ibm-arabic)"],
      },
    },
  },
  plugins: [],
};


============================================================
FILE: tsconfig.json
============================================================
{
  "compilerOptions": {
    // مستوى الـ ECMAScript اللي الكود هيتحوّل ليه
    "target": "es2022",
    // المكتبات اللي بيقرأها TypeScript (DOM, ESNext... إلخ)
    "lib": [
      "dom",
      "dom.iterable",
      "esnext"
    ],
    // السماح بملفات JavaScript مع TS (مهم لو عندك ملفات .js/.jsx)
    "allowJs": true,
    // يتجاهل فحص الـ types للـ node_modules عشان السرعة
    "skipLibCheck": true,
    // تفعيل القواعد الصارمة في TypeScript (أفضل ممارسة)
    "strict": true,
    // يتأكد إن أسماء الملفات متوافقة في حالة الحروف (مهم على Linux و Git)
    "forceConsistentCasingInFileNames": true,
    // ما يطلعش ملفات JS عند الكومبايل (Next.js بيتكفل بالكومبايل)
    "noEmit": true,
    // يسهل التعامل مع مكتبات CommonJS
    "esModuleInterop": true,
    // نوع الموديولز المستخدم
    "module": "esnext",
    // إزاي يحل الاستيرادات (Node.js style)
    "moduleResolution": "node",
    // السماح بقراءة JSON كاستيراد مباشر
    "resolveJsonModule": true,
    // مطلوب في Next.js عشان يشتغل مع TS بشكل صحيح
    "isolatedModules": true,
    // نوع JSX: (react-jsx = React 17+ مع JSX Runtime الجديد)
    "jsx": "preserve",
    // الكومبايل بيبني بشكل تدريجي أسرع
    "incremental": true,
    // إضافة الـ plugin بتاع Next.js عشان يعرف البيئة
    "plugins": [
      {
        "name": "next"
      }
    ],
    // ✅ مهم: تفعيل alias @/src/
    "baseUrl": ".",
    "paths": {
      "@/*": [
        "./src/*"
      ]
    }
  },
  // الملفات اللي هيقراها TypeScript
  "include": [
    "next-env.d.ts",
    "**/*.ts",
    "**/*.tsx",
    "**/*.js",
    "**/*.jsx",
    ".next/types/**/*.ts"
  ],
  // الملفات اللي يتجاهلها
  "exclude": [
    "node_modules"
  ]
}